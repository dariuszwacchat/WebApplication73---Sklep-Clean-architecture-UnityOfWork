#pragma checksum "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "641c8796bb6a5cd6b29d014f68cb375b4367e421"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared__filtr), @"mvc.1.0.view", @"/Views/Shared/_filtr.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using WebApplication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Authentication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Application.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.Models.Enum;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.Account;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.ReceiveMessages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.Roles;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.SendMessages;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.Users;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.Products;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.Orders;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.Payments;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\_ViewImports.cshtml"
using Domain.ViewModels.Koszyk;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"641c8796bb6a5cd6b29d014f68cb375b4367e421", @"/Views/Shared/_filtr.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4b2e31d84876ab28b57832e5e9010d92088670fb", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared__filtr : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<ProductsViewModel>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "Index", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "Products", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
  
    int iloscProduktow = 0;
    int choosenCategory = 0;

    if (!string.IsNullOrEmpty(Model.CategoryName))
        choosenCategory = 1;

    if (!string.IsNullOrEmpty(Model.CategoryName) && !string.IsNullOrEmpty(Model.SubcategoryName))
        choosenCategory = 2;

    if (!string.IsNullOrEmpty(Model.CategoryName) && !string.IsNullOrEmpty(Model.SubcategoryName) && !string.IsNullOrEmpty(Model.SubsubcategoryName))
        choosenCategory = 3;



    void DisplaySelectedBrands (string markaName, string markaForName, int iloscProduktow)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\"");
            BeginWriteAttribute("id", " id=\"", 688, "\"", 706, 1);
#nullable restore
#line 21 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 693, markaForName, 693, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" name=\"SelectedBrands\"");
            BeginWriteAttribute("value", " value=\"", 729, "\"", 747, 1);
#nullable restore
#line 21 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 737, markaName, 737, 10, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" ");
#nullable restore
#line 21 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                                                                                    Write(Model.SelectedBrands != null && Model.SelectedBrands.Contains(@markaName) ? "checked" : "");

#line default
#line hidden
#nullable disable
            WriteLiteral(" />\r\n            <label class=\"form-check-label\"");
            BeginWriteAttribute("for", " for=\"", 890, "\"", 909, 1);
#nullable restore
#line 22 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 896, markaForName, 896, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 22 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                           Write(markaName);

#line default
#line hidden
#nullable disable
            WriteLiteral(" | </label>\r\n            <span>");
#nullable restore
#line 23 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
             Write(iloscProduktow);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n        </div>\r\n");
#nullable restore
#line 25 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
    }

    void DisplaySelectedColors (string colorName, string colorForName, int iloscProduktow)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\"");
            BeginWriteAttribute("id", " id=\"", 1193, "\"", 1211, 1);
#nullable restore
#line 30 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 1198, colorForName, 1198, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" name=\"SelectedColors\"");
            BeginWriteAttribute("value", " value=\"", 1234, "\"", 1252, 1);
#nullable restore
#line 30 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 1242, colorName, 1242, 10, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" ");
#nullable restore
#line 30 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                                                                                    Write(Model.SelectedColors != null && Model.SelectedColors.Contains(colorName) ? "checked" : "");

#line default
#line hidden
#nullable disable
            WriteLiteral(" />\r\n            <label class=\"form-check-label\"");
            BeginWriteAttribute("for", " for=\"", 1394, "\"", 1413, 1);
#nullable restore
#line 31 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 1400, colorForName, 1400, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 31 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                           Write(colorName);

#line default
#line hidden
#nullable disable
            WriteLiteral(" | </label>\r\n            <span>");
#nullable restore
#line 32 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
             Write(iloscProduktow);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n        </div>\r\n");
#nullable restore
#line 34 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
    }

    void DisplaySelectedRozmiary (string rozmiarName, string rozmiarForName, int iloscProduktow)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <div class=\"form-check\">\r\n            <input class=\"form-check-input\" type=\"checkbox\"");
            BeginWriteAttribute("id", " id=\"", 1703, "\"", 1723, 1);
#nullable restore
#line 39 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 1708, rozmiarForName, 1708, 15, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" name=\"SelectedRozmiary\"");
            BeginWriteAttribute("value", " value=\"", 1748, "\"", 1768, 1);
#nullable restore
#line 39 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 1756, rozmiarName, 1756, 12, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" ");
#nullable restore
#line 39 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                                                                                          Write(Model.SelectedRozmiary != null && Model.SelectedRozmiary.Contains(@rozmiarName) ? "checked" : "");

#line default
#line hidden
#nullable disable
            WriteLiteral(" />\r\n            <label class=\"form-check-label\"");
            BeginWriteAttribute("for", " for=\"", 1917, "\"", 1938, 1);
#nullable restore
#line 40 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 1923, rozmiarForName, 1923, 15, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 40 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                             Write(rozmiarName);

#line default
#line hidden
#nullable disable
            WriteLiteral(" | </label>\r\n            <span>");
#nullable restore
#line 41 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
             Write(iloscProduktow);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n        </div>\r\n");
#nullable restore
#line 43 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
    }


#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n<input type=\"submit\" value=\"Filtruj\" />\r\n\r\n\r\n");
            WriteLiteral("<h3 class=\"mt-10 mb-5\">Filter by Marka</h3>\r\n<div class=\"checkBoxContainer\">\r\n");
#nullable restore
#line 56 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
      

        // pierwszy poziom kategorii
        if (choosenCategory == 1)
        {
            for (var i = 0; i < Model.Marki.Count; i++)
            {
                string markaName = Model.Marki[i];
                string markaForName = $"{Model.Marki[i]}Checkbox{i}";

                // Tak, Nie, Nie
                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands (markaName, markaForName, iloscProduktow);

                }

                // Tak, Tak, Tak
                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                // Tak, Nie, Tak
                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                // Tak, Nie, Nie
                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                // Tak, Tak, Nie
                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                // Nie, Nie, Nie
                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                // Nie, Tak, Tak
                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                // Nie, Nie, Tak
                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                // Nie, Tak, Nie
                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

            }
        }



        // drugi poziom kategorii
        if (choosenCategory == 2)
        {
            for (var i = 0; i < Model.Marki.Count; i++)
            {
                string markaName = Model.Marki[i];
                string markaForName = $"{Model.Marki[i]}Checkbox{i}";

                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);

                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && Model.SelectedColors.Any(a => a == w.Kolor) && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && Model.SelectedColors.Any(a => a == w.Kolor) && Model.SelectedRozmiary.Any(a => a == w.Rozmiar) && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && Model.SelectedRozmiary.Any(a => a == w.Rozmiar) && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && Model.SelectedColors.Any(a => a == w.Kolor) && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

            }
        }



        // trzeci poziom kategorii
        if (choosenCategory == 3)
        {
            for (var i = 0; i < Model.Marki.Count; i++)
            {
                string markaName = Model.Marki[i];
                string markaForName = $"{Model.Marki[i]}Checkbox{i}";

                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName && w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <div class=\"form-check\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\"");
            BeginWriteAttribute("id", " id=\"", 13620, "\"", 13638, 1);
#nullable restore
#line 264 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 13625, markaForName, 13625, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" name=\"SelectedBrands\"");
            BeginWriteAttribute("value", " value=\"", 13661, "\"", 13679, 1);
#nullable restore
#line 264 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 13669, markaName, 13669, 10, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" ");
#nullable restore
#line 264 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                                                                                                    Write(Model.SelectedBrands != null && Model.SelectedBrands.Contains(@markaName) ? "checked" : "");

#line default
#line hidden
#nullable disable
            WriteLiteral(" />\r\n                            <label class=\"form-check-label\"");
            BeginWriteAttribute("for", " for=\"", 13838, "\"", 13857, 1);
#nullable restore
#line 265 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 13844, markaForName, 13844, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 265 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                                           Write(markaName);

#line default
#line hidden
#nullable disable
            WriteLiteral(" | </label>\r\n                            <span>");
#nullable restore
#line 266 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                             Write(iloscProduktow);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        </div>\r\n");
#nullable restore
#line 268 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                    }

                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                    {

#line default
#line hidden
#nullable disable
            WriteLiteral("                        <div class=\"form-check\">\r\n                            <input class=\"form-check-input\" type=\"checkbox\"");
            BeginWriteAttribute("id", " id=\"", 14845, "\"", 14863, 1);
#nullable restore
#line 284 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 14850, markaForName, 14850, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" name=\"SelectedBrands\"");
            BeginWriteAttribute("value", " value=\"", 14886, "\"", 14904, 1);
#nullable restore
#line 284 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 14894, markaName, 14894, 10, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(" ");
#nullable restore
#line 284 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                                                                                                    Write(Model.SelectedBrands != null && Model.SelectedBrands.Contains(@markaName) ? "checked" : "");

#line default
#line hidden
#nullable disable
            WriteLiteral(" />\r\n                            <label class=\"form-check-label\"");
            BeginWriteAttribute("for", " for=\"", 15063, "\"", 15082, 1);
#nullable restore
#line 285 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
WriteAttributeValue("", 15069, markaForName, 15069, 13, false);

#line default
#line hidden
#nullable disable
            EndWriteAttribute();
            WriteLiteral(">");
#nullable restore
#line 285 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                                                                           Write(markaName);

#line default
#line hidden
#nullable disable
            WriteLiteral(" | </label>\r\n                            <span>");
#nullable restore
#line 286 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                             Write(iloscProduktow);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                        </div>\r\n");
#nullable restore
#line 288 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
                    }
                }

                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Marka.Name == markaName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && Model.SelectedColors.Any(a => a == w.Kolor) && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName && w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName && w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && Model.SelectedColors.Any(a => a == w.Kolor) && Model.SelectedRozmiary.Any(a => a == w.Rozmiar) && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName && w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && Model.SelectedRozmiary.Any(a => a == w.Rozmiar) && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName && w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(w => w.Marka.Name == markaName && Model.SelectedColors.Any(a => a == w.Kolor) && w.Category.Name == Model.CategoryName && w.Subcategory.Name == Model.SubcategoryName && w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedBrands(markaName, markaForName, iloscProduktow);
                }

            }
        }
    

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
            WriteLiteral("<h3 class=\"mt-10 mb-5\">Filter by Color</h3>\r\n<div>\r\n");
#nullable restore
#line 354 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
      

        // pierwszy poziom kategorii
        if (choosenCategory == 1)
        {
            for (var i = 0; i < Model.Kolory.Count; i++)
            {
                string colorName = $"{Model.Kolory[i]}";
                string colorForName = $"{Model.Kolory[i]}Checkbox{i}";


                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors (colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }
            }
        }



        // drugi poziom kategorii
        if (choosenCategory == 2)
        {
            for (var i = 0; i < Model.Kolory.Count; i++)
            {
                string colorName = $"{Model.Kolory[i]}";
                string colorForName = $"{Model.Kolory[i]}Checkbox{i}";

                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }
            }
        }



        // trzeci poziom kategorii
        if (choosenCategory == 3)
        {
            for (var i = 0; i < Model.Kolory.Count; i++)
            {
                string colorName = $"{Model.Kolory[i]}";
                string colorForName = $"{Model.Kolory[i]}Checkbox{i}";

                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        Model.SelectedRozmiary.Any(a => a == w.Rozmiar) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Kolor == colorName &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedColors(colorName, colorForName, iloscProduktow);
                }
            }
        }
    

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
            WriteLiteral("<h3 class=\"mt-10 mb-5\">Filter by Rozmiar</h3>\r\n<div>\r\n");
#nullable restore
#line 667 "F:\C# Projects\2019\ASP .NET Core\Mvc\WebApplication73 - Sklep, Clean architecture, UnityOfWork\WebApplication\Views\Shared\_filtr.cshtml"
      

        if (choosenCategory == 1)
        {
            for (var i = 0; i < Model.Rozmiary.Count; i++)
            {
                string rozmiarName = Model.Rozmiary[i];
                string rozmiarForName = $"{Model.Rozmiary[i]}Checkbox{i}";

                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary (rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }
            }
        }



        if (choosenCategory == 2)
        {
            for (var i = 0; i < Model.Rozmiary.Count; i++)
            {
                string rozmiarName = Model.Rozmiary[i];
                string rozmiarForName = $"{Model.Rozmiary[i]}Checkbox{i}";

                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }
            }
        }



        if (choosenCategory == 3)
        {
            for (var i = 0; i < Model.Rozmiary.Count; i++)
            {
                string rozmiarName = Model.Rozmiary[i];
                string rozmiarForName = $"{Model.Rozmiary[i]}Checkbox{i}";

                if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedBrands.Any(a => a == w.Marka.Name) &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && !Model.SelectedColors.Any() && Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }

                else if (!Model.SelectedBrands.Any() && Model.SelectedColors.Any() && !Model.SelectedRozmiary.Any())
                {
                    iloscProduktow = Context.Products.Where(
                        w => w.Rozmiar == rozmiarName &&
                        Model.SelectedColors.Any(a => a == w.Kolor) &&
                        w.Category.Name == Model.CategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subcategory.Name == Model.SubcategoryName &&
                        w.Subsubcategory.Name == Model.SubsubcategoryName).ToList().Count;
                    if (iloscProduktow > 0)
                        DisplaySelectedRozmiary(rozmiarName, rozmiarForName, iloscProduktow);
                }
            }
        }



    

#line default
#line hidden
#nullable disable
            WriteLiteral("</div>\r\n\r\n\r\n\r\n<input type=\"submit\" value=\"Filtruj\" />\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "641c8796bb6a5cd6b29d014f68cb375b4367e42173203", async() => {
                WriteLiteral("\r\n    Resetuj\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public SignInManager<ApplicationUser> SignInManager { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public UserManager<ApplicationUser> UserManager { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public ApplicationDbContext Context { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<ProductsViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
